import java.util.ArrayList;
import java.util.List;

class Interval {
    int start;
    int end;

    Interval(int start, int end) {
        this.start = start;
        this.end = end;
    }
}

public class Task03 {
    public static void mergeIntervals(List<Interval> intervals) {
        if (intervals == null || intervals.isEmpty()) {
            return;
        }

        int currentIndex = 0; // Index to keep track of the current interval position

        // Create a mutable ArrayList to allow modification
        List<Interval> mutableIntervals = new ArrayList<>(intervals);

        // Iterate through the sorted list of intervals starting from the second interval
        for (int i = 1; i < mutableIntervals.size(); i++) {
            Interval current = mutableIntervals.get(currentIndex);
            Interval next = mutableIntervals.get(i);

            if (current.end >= next.start) {
                // Merge overlapping intervals by updating the end time of the current interval
                current.end = Math.max(current.end, next.end);

      } else {
                // If they do not overlap, move to the next interval position
                currentIndex++;
                mutableIntervals.set(currentIndex, next);
            }
        }

        // Remove any remaining intervals after merging
        mutableIntervals.subList(currentIndex + 1, mutableIntervals.size()).clear();

        // Clear the input list and copy the merged intervals back into it
        intervals.clear();
        intervals.addAll(mutableIntervals);
    }

    public static void main(String[] args) {
        List<Interval> intervals = new ArrayList<>();
        intervals.add(new Interval(1, 3));
        intervals.add(new Interval(2, 6));
        intervals.add(new Interval(8, 10));
        intervals.add(new Interval(15, 18));

        mergeIntervals(intervals);

        for (Interval interval : intervals) {
            System.out.println("[" + interval.start + ", " + interval.end + "]");
        }
    }
}
